module memory(clk,MemWrite,A,WD,RD);
input clk,MemWrite;
input [31:0] A,WD;
output [31:0] RD;
reg [7:0] mem [255:0];
assign RD = {mem[A+3],mem[A+2],mem[A+1],mem[A]};
integer i;

initial begin

{mem[3],mem[2],mem[1],mem[0]} =	   32'b1110_01_0_0000_1_0001_0000_000000000000; //LDR R0,[R1,#0] --> R0=4;
{mem[7],mem[6],mem[5],mem[4]} =	   32'b1110_00_0_0000_0_0000_0000_000000000001; //ADD R0,R0,R1  --> R0=4+4+0=8;
{mem[11],mem[10],mem[9],mem[8]} =   32'b1110_00_1_0101_0_0000_0000_000000000001; //LSL R0,R0,#1  --> R0=8*2=16;
{mem[15],mem[14],mem[13],mem[12]} = 32'b1110_00_1_0100_0_0000_0000_000000000001; //LSR R0,R0,#1  --> R0=16/2=8;
{mem[19],mem[18],mem[17],mem[16]} = 32'b1110_00_0_0001_1_0010_0010_000000000001; //SUB R2,R2,R1  
{mem[23],mem[22],mem[21],mem[20]} = 32'b1110_00_0_0010_0_0000_0001_000000000010; //AND R1,R0,R2
{mem[27],mem[26],mem[25],mem[24]} = 32'b1110_00_0_0011_0_0001_0000_000000000010; //ORR R0,R1,R2
{mem[31],mem[30],mem[29],mem[28]} = 32'b1110_01_0_0000_0_0001_0000_000000000100; //STR R0,[R1,#4]
{mem[35],mem[34],mem[33],mem[32]} = 32'b1110_00_0_0110_0_0001_0000_000000000000; //CMP R0,R1
{mem[39],mem[38],mem[37],mem[36]} = 32'b1110_00_000000_0000_0000_000000000000;
{mem[43],mem[42],mem[41],mem[40]} = 32'b1110_00_000000_0000_0000_000000000000;



for(i=44; i<256; i=i+1) begin
mem[i] = 8'b0;
end

end

always @(posedge clk) begin
if(MemWrite) begin
{mem[A+3],mem[A+2],mem[A+1],mem[A]} <= WD;
end

end


endmodule









