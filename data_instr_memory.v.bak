module data_instr_memory(clk,mem_write,ADD,WD,RD);
input clk,mem_write;
input [31:0] ADD,WD;
output [31:0] RD;
reg [7:0] MEMORY [255:0];
assign RD = {MEMORY[ADD+3],MEMORY[ADD+2],MEMORY[ADD+1],MEMORY[ADD]};
integer location;

initial 
begin

{MEMORY[3],MEMORY[2],MEMORY[1],MEMORY[0]}     =	32'b1110_01_0_0000_1_0001_0000_000000000000; //LDR R0,[R1,#0] --> R0=4;
{MEMORY[7],MEMORY[6],MEMORY[5],MEMORY[4]}     =	32'b1110_00_0_0000_0_0000_0000_000000000001; //ADD R0,R0,R1  --> R0=4+4+0=8;
{MEMORY[11],MEMORY[10],MEMORY[9],MEMORY[8]}   = 32'b1110_00_1_0101_0_0000_0000_000000000001; //LSL R0,R0,#1  --> R0=8*2=16;
{MEMORY[15],MEMORY[14],MEMORY[13],MEMORY[12]} = 32'b1110_00_1_0100_0_0000_0000_000000000001; //LSR R0,R0,#1  --> R0=16/2=8;
{MEMORY[19],MEMORY[18],MEMORY[17],MEMORY[16]} = 32'b1110_00_0_0001_1_0010_0010_000000000001; //SUB R2,R2,R1  
{MEMORY[23],MEMORY[22],MEMORY[21],MEMORY[20]} = 32'b1110_00_0_0010_0_0000_0001_000000000010; //AND R1,R0,R2
{MEMORY[27],MEMORY[26],MEMORY[25],MEMORY[24]} = 32'b1110_00_0_0011_0_0001_0000_000000000010; //ORR R0,R1,R2
{MEMORY[31],MEMORY[30],MEMORY[29],MEMORY[28]} = 32'b1110_01_0_0000_0_0001_0000_000000000100; //STR R0,[R1,#4]
{MEMORY[35],MEMORY[34],MEMORY[33],MEMORY[32]} = 32'b1110_00_0_0110_0_0001_0000_000000000000; //CMP R0,R1
{MEMORY[39],MEMORY[38],MEMORY[37],MEMORY[36]} = 32'b1110_00_000000_0000_0000_000000000000;
{MEMORY[43],MEMORY[42],MEMORY[41],MEMORY[40]} = 32'b1110_00_000000_0000_0000_000000000000;



for(i=44; i<256; i=i+1) 
	begin
	MEMORY[location] = 8'b0;
	end
end

always @(posedge clk) 
begin
	if(mem_write) begin
	{MEMORY[ADD+3],MEMORY[ADD+2],MEMORY[ADD+1],MEMORY[ADD]} <= WD;
	end

end


endmodule









