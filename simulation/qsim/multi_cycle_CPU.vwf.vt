// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/11/2020 13:24:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    multi_cycle_CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module multi_cycle_CPU_vlg_sample_tst(
	clk,
	reset,
	sampler_tx
);
input  clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module multi_cycle_CPU_vlg_check_tst (
	AluFlags,
	RESULT,
	STATE,
	sampler_rx
);
input [3:0] AluFlags;
input [7:0] RESULT;
input [3:0] STATE;
input sampler_rx;

reg [3:0] AluFlags_expected;
reg [7:0] RESULT_expected;
reg [3:0] STATE_expected;

reg [3:0] AluFlags_prev;
reg [7:0] RESULT_prev;
reg [3:0] STATE_prev;

reg [3:0] AluFlags_expected_prev;
reg [7:0] RESULT_expected_prev;
reg [3:0] STATE_expected_prev;

reg [3:0] last_AluFlags_exp;
reg [7:0] last_RESULT_exp;
reg [3:0] last_STATE_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	AluFlags_prev = AluFlags;
	RESULT_prev = RESULT;
	STATE_prev = STATE;
end

// update expected /o prevs

always @(trigger)
begin
	AluFlags_expected_prev = AluFlags_expected;
	RESULT_expected_prev = RESULT_expected;
	STATE_expected_prev = STATE_expected;
end


// expected AluFlags[ 3 ]
initial
begin
	AluFlags_expected[3] = 1'bX;
end 
// expected AluFlags[ 2 ]
initial
begin
	AluFlags_expected[2] = 1'bX;
end 
// expected AluFlags[ 1 ]
initial
begin
	AluFlags_expected[1] = 1'bX;
end 
// expected AluFlags[ 0 ]
initial
begin
	AluFlags_expected[0] = 1'bX;
end 
// expected RESULT[ 7 ]
initial
begin
	RESULT_expected[7] = 1'bX;
end 
// expected RESULT[ 6 ]
initial
begin
	RESULT_expected[6] = 1'bX;
end 
// expected RESULT[ 5 ]
initial
begin
	RESULT_expected[5] = 1'bX;
end 
// expected RESULT[ 4 ]
initial
begin
	RESULT_expected[4] = 1'bX;
end 
// expected RESULT[ 3 ]
initial
begin
	RESULT_expected[3] = 1'bX;
end 
// expected RESULT[ 2 ]
initial
begin
	RESULT_expected[2] = 1'bX;
end 
// expected RESULT[ 1 ]
initial
begin
	RESULT_expected[1] = 1'bX;
end 
// expected RESULT[ 0 ]
initial
begin
	RESULT_expected[0] = 1'bX;
end 
// expected STATE[ 3 ]
initial
begin
	STATE_expected[3] = 1'bX;
end 
// expected STATE[ 2 ]
initial
begin
	STATE_expected[2] = 1'bX;
end 
// expected STATE[ 1 ]
initial
begin
	STATE_expected[1] = 1'bX;
end 
// expected STATE[ 0 ]
initial
begin
	STATE_expected[0] = 1'bX;
end 
// generate trigger
always @(AluFlags_expected or AluFlags or RESULT_expected or RESULT or STATE_expected or STATE)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AluFlags = %b | expected RESULT = %b | expected STATE = %b | ",AluFlags_expected_prev,RESULT_expected_prev,STATE_expected_prev);
	$display("| real AluFlags = %b | real RESULT = %b | real STATE = %b | ",AluFlags_prev,RESULT_prev,STATE_prev);
`endif
	if (
		( AluFlags_expected_prev[0] !== 1'bx ) && ( AluFlags_prev[0] !== AluFlags_expected_prev[0] )
		&& ((AluFlags_expected_prev[0] !== last_AluFlags_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AluFlags[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AluFlags_expected_prev);
		$display ("     Real value = %b", AluFlags_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AluFlags_exp[0] = AluFlags_expected_prev[0];
	end
	if (
		( AluFlags_expected_prev[1] !== 1'bx ) && ( AluFlags_prev[1] !== AluFlags_expected_prev[1] )
		&& ((AluFlags_expected_prev[1] !== last_AluFlags_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AluFlags[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AluFlags_expected_prev);
		$display ("     Real value = %b", AluFlags_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AluFlags_exp[1] = AluFlags_expected_prev[1];
	end
	if (
		( AluFlags_expected_prev[2] !== 1'bx ) && ( AluFlags_prev[2] !== AluFlags_expected_prev[2] )
		&& ((AluFlags_expected_prev[2] !== last_AluFlags_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AluFlags[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AluFlags_expected_prev);
		$display ("     Real value = %b", AluFlags_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AluFlags_exp[2] = AluFlags_expected_prev[2];
	end
	if (
		( AluFlags_expected_prev[3] !== 1'bx ) && ( AluFlags_prev[3] !== AluFlags_expected_prev[3] )
		&& ((AluFlags_expected_prev[3] !== last_AluFlags_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AluFlags[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AluFlags_expected_prev);
		$display ("     Real value = %b", AluFlags_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AluFlags_exp[3] = AluFlags_expected_prev[3];
	end
	if (
		( RESULT_expected_prev[0] !== 1'bx ) && ( RESULT_prev[0] !== RESULT_expected_prev[0] )
		&& ((RESULT_expected_prev[0] !== last_RESULT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[0] = RESULT_expected_prev[0];
	end
	if (
		( RESULT_expected_prev[1] !== 1'bx ) && ( RESULT_prev[1] !== RESULT_expected_prev[1] )
		&& ((RESULT_expected_prev[1] !== last_RESULT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[1] = RESULT_expected_prev[1];
	end
	if (
		( RESULT_expected_prev[2] !== 1'bx ) && ( RESULT_prev[2] !== RESULT_expected_prev[2] )
		&& ((RESULT_expected_prev[2] !== last_RESULT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[2] = RESULT_expected_prev[2];
	end
	if (
		( RESULT_expected_prev[3] !== 1'bx ) && ( RESULT_prev[3] !== RESULT_expected_prev[3] )
		&& ((RESULT_expected_prev[3] !== last_RESULT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[3] = RESULT_expected_prev[3];
	end
	if (
		( RESULT_expected_prev[4] !== 1'bx ) && ( RESULT_prev[4] !== RESULT_expected_prev[4] )
		&& ((RESULT_expected_prev[4] !== last_RESULT_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[4] = RESULT_expected_prev[4];
	end
	if (
		( RESULT_expected_prev[5] !== 1'bx ) && ( RESULT_prev[5] !== RESULT_expected_prev[5] )
		&& ((RESULT_expected_prev[5] !== last_RESULT_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[5] = RESULT_expected_prev[5];
	end
	if (
		( RESULT_expected_prev[6] !== 1'bx ) && ( RESULT_prev[6] !== RESULT_expected_prev[6] )
		&& ((RESULT_expected_prev[6] !== last_RESULT_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[6] = RESULT_expected_prev[6];
	end
	if (
		( RESULT_expected_prev[7] !== 1'bx ) && ( RESULT_prev[7] !== RESULT_expected_prev[7] )
		&& ((RESULT_expected_prev[7] !== last_RESULT_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESULT_exp[7] = RESULT_expected_prev[7];
	end
	if (
		( STATE_expected_prev[0] !== 1'bx ) && ( STATE_prev[0] !== STATE_expected_prev[0] )
		&& ((STATE_expected_prev[0] !== last_STATE_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port STATE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", STATE_expected_prev);
		$display ("     Real value = %b", STATE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_STATE_exp[0] = STATE_expected_prev[0];
	end
	if (
		( STATE_expected_prev[1] !== 1'bx ) && ( STATE_prev[1] !== STATE_expected_prev[1] )
		&& ((STATE_expected_prev[1] !== last_STATE_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port STATE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", STATE_expected_prev);
		$display ("     Real value = %b", STATE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_STATE_exp[1] = STATE_expected_prev[1];
	end
	if (
		( STATE_expected_prev[2] !== 1'bx ) && ( STATE_prev[2] !== STATE_expected_prev[2] )
		&& ((STATE_expected_prev[2] !== last_STATE_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port STATE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", STATE_expected_prev);
		$display ("     Real value = %b", STATE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_STATE_exp[2] = STATE_expected_prev[2];
	end
	if (
		( STATE_expected_prev[3] !== 1'bx ) && ( STATE_prev[3] !== STATE_expected_prev[3] )
		&& ((STATE_expected_prev[3] !== last_STATE_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port STATE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", STATE_expected_prev);
		$display ("     Real value = %b", STATE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_STATE_exp[3] = STATE_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module multi_cycle_CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
// wires                                               
wire [3:0] AluFlags;
wire [7:0] RESULT;
wire [3:0] STATE;

wire sampler;                             

// assign statements (if any)                          
multi_cycle_CPU i1 (
// port map - connection between master ports and signals/registers   
	.AluFlags(AluFlags),
	.clk(clk),
	.reset(reset),
	.RESULT(RESULT),
	.STATE(STATE)
);

// clk
initial
begin
	clk = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

multi_cycle_CPU_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.sampler_tx(sampler)
);

multi_cycle_CPU_vlg_check_tst tb_out(
	.AluFlags(AluFlags),
	.RESULT(RESULT),
	.STATE(STATE),
	.sampler_rx(sampler)
);
endmodule

